# 2021/04/14(수) - 3일차 수업

'''
< 확인학습 문제>
1. 10진수 223, 168, 86 에 대하여 2진수, 8진수, 16진수로 변환하고,
파이썬 프로그램을 통해 확인하시오.

2. 과일이름, 과일가격, 구매수량을 입력 받아서, 과일이름, 과일가격, 구매수량, 총 구매금액을
출력하시오.
-- 입력화면
구매할 과일 이름을 입력하시오. 포도
구매할 과일 가격을 입력하시오. 3000
구매수량을 입력하시오. 5

-- 출력화면
과일이름: 포도
과일가격: 3000
구매수량: 5
총구매금액: 15000
'''

# 1번 문제
print(223)
print(0b11011111)
print(0o337)
print(0xdf)
print("-----------")
print(168)
print(0b10101000)
print(0o250)
print(0xa8)
print("-----------")
print(86)
print(0b1010110)
print(0o126)
print(0x56)
print("-----------")

# 2번 문제
'''
print("입력화면")
fruit = "grape"
print("과일이름:", fruit)
print("가격:", 3000)
print("구매수량:", 5)

print("-----------")
과일이름 = str(input("과일이름 입력: "))
과일가격 = int(input("과일가격 입력: "))
구매수량 = int(input("구매수량 입력: "))
총구매금액 = int(input("총구매금액 입력: "))
'''
'''
# 10진수 223
print("10진수:", 233)
print("2진수:", 0b11011111)
print("8진수:", 0o337)
print("16진수:", 0xDF)
print("------------")
# 10진수 168

print("10진수:", 168)
print("2진수:", 0b10101000)
print("8진수:", 0o250)
print("16진수:", 0xA8)
print("------------")

# 10진수 86

print("10진수:", 86)
print("2진수:", 0b01010110)
print("8진수:", 0o126)
print("16진수:", 0x56)

# 과일
name = input("구매할 과일이름을 입력하시오. ")
price = int(input("구매할 과일가격을 입력하시오. "))
count = int(input("구매수량을 입력하시오. "))

# "hello" * "python"
# "3000" * "5"
tot = price * count

print("과일이름:", name)
print("과일가격:", price)
print("구매수량:", count)
print("총구매금액:", tot)

'''

'''
< 아스키 코드와 유니코드 >
아스키 코드(ASCII Code) American Standard Code for Infomation Interchange
- 컴퓨터에서 데이터의 전달을 위해서 문자를 숫자로 표현할 수 있도록 약속해 놓은 코드
- 7비트로 표현 (0~127)
- C언어 - 아스키 코드 지원, 영어는 사용가능하지만, 한글 지원은 하지 않음
ex) A: 65 B: 66, a: 97, b: 98

유니코드(unicode) - 아스키 코드를 포함해서 16비트 코드 체계로 확장.
- 2의 16승까지 지원, 65536문까지 지원
- 전세계 모든 문자를 지원

'''

a = 10
사랑 = 100
print(a, ":", 사랑)

# 아스키코드 확인
# ord() 함수 : 문자에 대한 아스키코드 값을 출력
# chr() 함수 : 아스키코드값에 대한 문자를 출력
print("a", ":", ord("a"))
print(65, ":", chr(65))

'''
Python : and, or, not
Java   : &&, ||, !
R      : &, |, !
oracle : and, or, not

* : 아스테리스크(asterisk)
& : 앰퍼샌드(ampersand)
| : 파이프(pipe)
~ : 틸드(tilde)
^ : 캐럿(carat)

< 연산자(operator)의 종류 > : 연산자의 역할, 기능
1. 대입 연산자 : =
2. 산술 연산자 : +, -, *, /(소숫점을 포함한 나눈 결과)
//(나누어서 몫), %(나누어서 나머지), **(승수)
3. 비교 연산자 : >, >=, <=, ==(equal), !=(not equal)
- 비교 연산의 결과는 True(참) 또는 False(거짓)
4. 논리 연산자 : And(이고, 면서), OR(이거나, 또는), NOT(논리 NOT, 논리 부정)
AND(논리 And) : 모든 항이 참일 때 전체 결과가 참, 하나라도 거짓이 있으면 전체 결과도 거짓
OR(논리 or) : 둘 중에 하나라도 참이 있으면 전체 결과도 참, 모두가 거짓이면 전체 결과도 거짓
NOT(논리 Not) : 참을 거짓으로, 거짓을 참으로 바꾸어 줌.
- 논리, 비교 연산자 자주 함께 사용되며, 우선순위는 비교 연산자 먼저 계산하고, 논리 연산자를 계산
- 비교가 논리보다 우선순위가 높음
5. 부호 연산자: +(양수), -(음수) ex) +10, -10
6. 비트 연산자: &(비트 AND), |(비트 OR), ~(비트 NOT), ^(Exclusive OR, XOR, 배타적 OR)
- 비트 연산자는 2진수로 계산
& : 둘 다 1일 때 결과 1이 되는 연산자
| : 둘 중에 하나라도 1이 있을 때 1이 되는 연산자
^ : 둘 중 하나만 1일 때 결과가 1이 되는 연산자
~ : 0을 1로, 1을 0으로 반전시키는 연산자
7. 쉬프트 연산자 : <<, >>
<< : left shift 연산자, 2진수의 곱셈
>> : right shift 연산자, 2진수의 나눗셈

'''
print("--- 산술 연사자 ---")
a = 10; b = 3
print("a = ", a)
print("b = ", b)
print("a + b = ", a+b)
print("a - b = ", a-b)
print("a * b = ", a*b)
print("a / b = ", a/b) # 소숫점 포함한 나눈 결과, 3.3333333333333335
print("a // b = ", a//b) # 나누어서 몫을 구함.
print("a % b = ", a % b) # 나누어서 나머지를 구함.
print("2 ** 5 = ", 2**5) # 승수, 2의 5승 = 32
print("3 ** 4 = ", 3**4) # 승수, 3의 4승 = 81

print("--- 비교 연산자 ---")
print("a > b :", a>b) # True
print("a < b :", a<b) # False
print("a == b : ", a==b) # False
print("a != b : ", a!=b) # True

print("--- 논리 연산자 ---")
print(a>5 and b<5) # True
print(a>5 and b>5) # False
print(a<5 and b<5) # False
print(a>5 or b<5)  # True
print(a>5 or b>5)  # True
print(a<5 or b>5)  # False
print(not(a<5 or b>5)) # True

print("--- 비트 연산자 ---")
print("13 & 11 = ", 13 & 11) # 9
print("13 | 11 = ", 13 | 11) # 15
print("13 ^ 11 = ", 13 ^ 11) # 6

print("--- 쉬프트 연산자 ---")
print("2 << 3 =", 2 << 3)    # 16
print("32 >> 3 =", 32 >> 3)  # 4

'''
< 연산자의 분류 > : 연산자의 항의 갯수에 따른 분류
1. 단항(일항) 연산자 : +, - (부호), not, ~
2. 이항 연산자 : +, -, *, /, //, %(산술), >, >=, <, <=, ==, !=(비교), 논리(and, or),
비트(&, |, ^), 쉬프트(<<, >>)

< 연산자 우선순위 >
1. **
2. 단항 연산자 (+(부호), -(부호), not, ~)
3. 산술 연산자 (*, /, //, % 가 +, -보다는 우선순위가 높음)
4. 쉬프트 연산자 (<<, >>)
5. 비트 연산자 (& > ^ > | 순으로 우선순위가 높음)
6. 비교 연산자 (>, >=, <, <=, ==, !=)
7. 논리 연산자 (and가 or보다 우선순위가 높음)
8. 대입 연산자 (=)

프로그램밍에서 주로 사용하는 연산자는 산술, 비교, 논리 연산자
산술(*, /, //, % > +, -) > 비교 > 논리(and > or) 


# 데이터 타입 변환 함수
int() : 데이터를 정수로 변환하는 함수
float() : 데이터를 실수로 변환하는 함수
bool() : 데이터를 논리형으로 변환하는 함수
str() : 데이터를 문자열로 변환하는 함수

'''
print("----------------------")
s1 = "10"
s2 = "20"
s3 = "2.2"
s4 = "3.3"
s5 = 100
print(s1 + s2)
print(int(s1) + int(s2))
print(s3 + s4)
print(float(s3) + float(s4))
print(s5 + 50)
#print(str(s5) + 50) # "100" + 50, error
print(str(s5) + str(50)) # "100" + "50", "10050"

# 모든 데이터는 그 자체로 논리값을 가짐
# True : 공백이 아닌 문자열, 0이 아닌 숫자
# False : 공백 문자열, 0, None

# round() : 반올림 함수, 실수를 다룰때 사용
a= 12345.6789
print(a) # 12345.6789
print(round(a)) # 12346, 1의 자리까지 출력, 소숫점을 첫째자리에서 반올림
print(round(a, 0)) # 12346.0
print(round(a, 2)) # 12345.68
print(round(a, 1)) # 12345.7
print(round(a, -1)) # 12350.0, 십의 자리까지 출력, 1의 자리에서 반올림
print(round(a, -2)) # 12300.0, 백의 자리까지 출력, 10의 자리에서 반올림
























